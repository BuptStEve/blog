(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{313:function(t,e,a){"use strict";a.r(e),e.default=[["2022-03",{excerpt:" ## 怎么使用组件库？ 作为一个开发者，通常会用如下方式使用组件库。  ### 1. 使用 `<script>` 标签 即直接在 html 页面中，使用既传统又新潮（module）的 `<script>` 标签，来引入组件库代码。  ### 2. 借助构建工具 大部分情况下，前端项目还是基于 `npm` 安装组件库的包，之后再借助 webpack、vite 或其他构建工具使用组件库。 （当然你也......",tags:["ui"],id:0,title:"「20」前端组件库构建那些事儿（一）",lastUpdated:"2022-03-21 20:00:00",path:"/posts/020.ui-lib-1.html"},{excerpt:" ## 为什么用 TypeScript？  > TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open source. ———— [TypeScript 官网][1]  ### 1.第一时间发现类型错误 据 [rollbar......",tags:["TypeScript"],id:1,title:"「19」如何开发一个基于 TypeScript 的工具库并自动生成文档",lastUpdated:"2019-06-11 20:00:00",path:"/posts/019.ts-docs.html"}],["2019-02",{excerpt:" ## 遗留问题 书接上回，说道利用 `sideEffects` 字段，只需读取源文件即可实现按需加载，还有个坑忘了说...  > 文档中的样式打包后会丢失...  因为我们只注意到了作为组件库的源代码，而忘了我们的文档是通过 vuepress 编译，即底层也是基于 webpack 进行打包。所以 `sideEffects` 中也要加上文档中的文件。  ## 组件文档该写些什么？ 在编写组件库文档......",tags:["vue"],id:2,title:"「18」如何开发一个基于 Vue 的 ui 组件库（二）",lastUpdated:"2019-02-20 23:35:00",path:"/posts/018.how-to-build-a-vue-ui-lib-2.html"}],["2019-01",{excerpt:" ## 开发模式 ### 预览 demo 在开发一个 ui 组件库时，肯定需要一边预览 demo，一边修改代码。  常见的解决方案是像开发一般项目一样使用 `webpack-dev-server` 预览组件，比如通过 `vue-cli` 初始化项目，或者自己配置脚本。  文艺一点儿地可能会用到 `parcel` 来简化 demo 的开发配置（比如 [muse-ui][2]）。  ### 展示文档 ......",tags:["vue"],id:3,title:"「17」如何开发一个基于 Vue 的 ui 组件库（一）",lastUpdated:"2019-01-07 11:26:00",path:"/posts/017.how-to-build-a-vue-ui-lib-1.html"}],["2018-11",{excerpt:" ## 零、问题的由来 开门见山地说，这篇文章【又】是一篇安利软文~，安利的对象就是 [tua-storage](https://github.com/tuateam/tua-storage)。  顾名思义，这就是一款存储数据的工具。  > 用 tua-storage 好处大大的有么？  那必须滴~，下面开始我的表演~  * 多端统一 api * 支持数据同步 * 数据过期逻辑 * 自动清理过期数......",tags:["tua","storage"],id:4,title:"「16」如何构建通用存储中间层",lastUpdated:"2018-11-16 10:27:00",path:"/posts/016.how-to-build-a-common-storage-layer.html"},{excerpt:" ## 零、问题的由来 开门见山地说，这篇文章是一篇安利软文~，安利的对象就是最近搞的 [tua-api](https://github.com/tuateam/tua-api)。  顾名思义，这就是一款辅助获取接口数据的工具。  > 发请求相关的工具辣么多，那我为啥要用你呢？  理想状态下，项目中应该有一个 api 中间层。各种接口在这里定义，业务侧不应该手动编写接口地址，而应该调用接口层导出的......",tags:["tua","api"],id:5,title:"「15」如何构建通用 api 中间层",lastUpdated:"2018-11-05 11:08:00",path:"/posts/015.how-to-build-a-common-api-layer.html"}],["2018-08",{excerpt:" **[slide 地址](https://slides.com/yangzhenyu/functional-programming-in-javascript)**  ## 四、Talk is cheap！Show me the ... MONEY! > 以下内容主要参考自 [Professor Frisby Introduces Composable Functional JavaScript......",tags:["FP","JavaScript","函数式"],id:6,title:"「14」JavaScript 函数式编程（三）",lastUpdated:"2018-08-10 15:30:00",path:"/posts/014.fp-in-js-3.html"}],["2018-06",{excerpt:" ## 零、问题的由来 一般在前端展示图片时都会碰到这两个常见的需求：  1. 图片未加载完成时先展示占位图，等到图片加载完毕后再展示实际的图片。 2. 假如图片链接有问题（比如 404），依然展示占位图。甚至你还可以增加点击图片再次加载的功能。（例如知乎）  然鹅，小程序原生组件 image 并没有提供这些常用功能...  <img :src=\"$withBase('/imgs/tua-mp/T......",tags:["tua-mp","小程序"],id:7,title:"「13」微信小程序之如何使用自定义组件封装原生 image 组件",lastUpdated:"2018-06-17 18:45:00",path:"/posts/013.how-to-encapsulate-image-in-mina.html"},{excerpt:" 开门见山地说，小程序在日常开发中使用原生框架来开发还是挺不方便的，比如：  * 不支持 `npm` 包 * 不支持各种 `CSS` 预编译器 * 不支持配置 `Babel` 来转换一些 `JavaScript` 新特性  这样一来和日常开发前端页面的体验相比来说，简直就像在**刀耕火种**。  > 那么为了解决这些问题，我们能不能将前端开发中常用的 `webpack` 移植到小程序开发中呢？  ......",tags:["tua-mp","小程序"],id:8,title:"「12」终极蛇皮上帝视角之微信小程序之告别“刀耕火种”",lastUpdated:"2018-06-03 17:45:00",path:"/posts/012.say-goodbye-to-mina-native.html"}],["2018-05",{excerpt:" 众所周知 Vue 是借助 ES5 的 `Object.defineProperty` 方法设置 getter、setter 达到数据驱动界面，当然其中还有模板编译等等其他过程。  而小程序官方的 api 是在 `Page` 中调用 `this.setData` 方法来改变数据，从而改变界面。  那么假如我们将两者结合一下，将 `this.setData` 封装起来，岂不是可以像开发 Vue 应用......",tags:["tua-mp","小程序"],id:9,title:"「11」终极蛇皮上帝视角之微信小程序之告别 setData",lastUpdated:"2018-05-21 00:00:00",path:"/posts/011.say-goodbye-to-mina-setData.html"}],["2017-11",{excerpt:' **[slide 地址](https://slides.com/yangzhenyu/functional-programming-in-javascript)**  ## 三、可以，这很函数式~ <img :src="$withBase(\'/imgs/fp-in-js/this-is-very-fp.gif\')" alt="this-is-very-fp">  ### 3.1.函数是一等公民！......',tags:["FP","JavaScript","函数式"],id:10,title:"「10」JavaScript 函数式编程（二）",lastUpdated:"2017-11-23 17:45:00",path:"/posts/010.fp-in-js-2.html"}],["2017-10",{excerpt:" ## 零、前言 说到函数式编程，想必各位或多或少都有所耳闻，然而对于函数式的内涵和本质可能又有些说不清楚。  所以本文希望针对工程师，从应用（而非学术）的角度将函数式编程相关思想和实践（以 JavaScript 为例）分享给大家。  文章内容其实主要来自于在下阅读各类参考文献后的再整理，所以有什么错误也希望大家帮忙斧正~  **[slide 地址](https://slides.com/yang......",tags:["FP","JavaScript","函数式"],id:11,title:"「9」JavaScript 函数式编程（一）",lastUpdated:"2017-10-10 17:32:00",path:"/posts/009.fp-in-js-1.html"}],["2017-01",{excerpt:" ## 零、前言 在上一篇中介绍了 Redux 的各项基础 api。接着一步一步地介绍如何与 React 进行结合，并从引入过程中遇到的各个痛点引出 react-redux 的作用和原理。  不过目前为止还都是纸上谈兵，在日常的开发中最常见异步操作（如通过 ajax、jsonp 等方法 获取数据），在学习完上一篇后你可能依然没有头绪。因此本文将深入浅出地对于 redux 的进阶用法进行介绍。  #......",tags:["Redux","React","JavaScript"],id:12,title:"「8」Redux 进阶 - react 全家桶学习笔记（二）",lastUpdated:"2017-01-02 00:48:29",path:"/posts/008.advanced-redux.html"}],["2016-Oc",{excerpt:" ## 零、环境搭建 **参考资料** * [英文原版文档](http://redux.js.org/) * [中文文档](http://cn.redux.js.org/) * [墙裂推荐作者出的教学视频 基础篇](https://egghead.io/courses/getting-started-with-redux) * [墙裂推荐作者出的教学视频 高级篇](https://egghead.......",tags:["Redux","React","JavaScript"],id:13,title:"「7」Redux 基础 - react 全家桶学习笔记（一）",lastUpdated:"2016-Oct-25 23:00:35",path:"/posts/007.redux-basis.html"}],["2016-03",{excerpt:" **零、前言** 《JavaScript 高级程序设计（第三版）》第7章 函数表达式，学习笔记整理。  > 主要内容有如下三部分  * 函数表达式的特征 * 使用函数实现递归 * 使用闭包定义私有变量  # 一、第7章 函数表达式 ## 7.0. 函数定义 在 JavaScript 中定义函数有两种方法：  * 函数声明 * 函数表达式  ### 7.0.1. 函数声明 ```javascrip......",tags:["JavaScript"],id:14,title:"「6」JavaScript 函数表达式学习笔记",lastUpdated:"2016-03-23 15:27:58",path:"/posts/006.js-function-chapter7.html"},{excerpt:" **零、前言** 最近为了找暑假实习，正在恶补基础，仔细研读了《JavaScript 高级程序设计（第三版）》第6章 面向对象的程序设计。感觉收获颇多，在此献丑分享一点儿自己的理解。  > 同样按照书本的顺序分为如下三部分  * 理解对象属性 * 理解并创建对象 * 理解继承  # 一、第6章 面向对象的程序设计 ## 6.1. 理解对象 ECMA-262 把对象定义为：“无序属性的集合，其属性......",tags:["JavaScript"],id:15,title:"「5」JavaScript 面向对象深入理解",lastUpdated:"2016-03-17 16:27:58",path:"/posts/005.js-oo-chapter6.html"},{excerpt:" ## 零、前言 差不多结束了在移动研究院快一年的实习，加上马上到来的寒假，想着闲着也是闲着不然做个网站练练手吧╮(╯▽╰)╭  于是在寒假里就捣鼓了这么个网站 Byrs-News | [开源地址](https://github.com/BuptStEve/byrs-news)，主要内容是通过爬虫 [Byr-Crawler](https://github.com/BuptStEve/byr-cra......",tags:["meteor"],id:16,title:"「4」Byrs-News 建站笔记（一）",lastUpdated:"2016-03-16 11:27:58",path:"/posts/004.byrs-news%20notes%201.html"}],["2015-12",{excerpt:" ## 零、前言 在编写构建前端项目时，以下这些需求想必十分常见：  1. html/css/js 代码的预编译：     * Jade, Ejs...     * Sass, Less, Stylus...     * Dart, CoffeeScript, TypeScript, ES6/7... 2. 拯救你的 F5 或者 Command/Ctrl + R（即自动监听、编译并刷新浏览器） 3......",tags:["webpack","效率"],id:17,title:"「3」前端开发利器 webpack",lastUpdated:"2015-12-29 15:12:58",path:"/posts/003.js-webpack.html"}],["2015-11",{excerpt:" ## 零、问题的由来？ 平时逛 [北邮人论坛](http://bbs.byr.cn) 看到各种大神做的各种作品，技痒难耐，也想自己捣鼓捣鼓、学习服务器。 正好实验室有空闲电脑，就自己搭一个玩儿啦～。 在纠结半天，看了好多资(si)料(bi)后，决定选用 CentOS 作为操作系统， 主要开发环境为 Python 和 Node.js。  ## 一、系统安装 （怎么获取镜像就不赘述了～）  1. 利......",tags:["Linux","Server","Python","Node.js"],id:18,title:"「2」如何搭建自己的服务器？",lastUpdated:"2015-11-03 13:04:58",path:"/posts/002.centos-server.html"},{excerpt:' ## 零、问题的由来 不知道大家平时是怎么打开常用软件的：  ### 1. windows 用户 * 从桌面上一堆杂乱的文件中找到快捷方式双击打开？ <img :src="$withBase(\'/imgs/post-1/mess-desktop.png\')" alt="mess-desktop">  * 从桌面上分类整理好的文件夹中找到快捷方式双击打开？ <img :src="$withBase......',tags:["效率"],id:19,title:"「1」优雅地打开软件是怎样的体验？",lastUpdated:"2015-11-01 19:04:58",path:"/posts/001.the-way-to-open-software.html"}],["2015-10",{excerpt:" ## 零、Blog的由来 作为一个学计算机的，一直想整个自己的 Blog，尤其是最近在搞前端。先是看到 [jekyll](http://jekyllcn.com/) 感觉不错，折腾了半天感觉还是不够给力。 最后还是选择了 [hexo3](https://hexo.io/)。  主要是这几个优点吧：  * 免费╮(╯▽╰)╭ * 基于 Node.js * 速度快、操作更简单、命令少，专注于写作本身......",tags:["hexo"],id:20,title:"「0」Hello World",lastUpdated:"2015-10-29 19:04:58",path:"/posts/000.hello-world.html"}]]}}]);