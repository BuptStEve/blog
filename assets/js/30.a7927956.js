(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{339:function(t,s,a){"use strict";a.r(s);var n=a(13),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"零、前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#零、前言"}},[t._v("#")]),t._v(" 零、前言")]),t._v(" "),a("p",[t._v("说到函数式编程，想必各位或多或少都有所耳闻，然而对于函数式的内涵和本质可能又有些说不清楚。")]),t._v(" "),a("p",[t._v("所以本文希望针对工程师，从应用（而非学术）的角度将函数式编程相关思想和实践（以 JavaScript 为例）分享给大家。")]),t._v(" "),a("p",[t._v("文章内容其实主要来自于在下阅读各类参考文献后的再整理，所以有什么错误也希望大家帮忙斧正~")]),t._v(" "),a("p",[a("strong",[a("a",{attrs:{href:"https://slides.com/yangzhenyu/functional-programming-in-javascript",target:"_blank",rel:"noopener noreferrer"}},[t._v("slide 地址"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"一、什么是函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是函数式编程"}},[t._v("#")]),t._v(" 一、什么是函数式编程？")]),t._v(" "),a("blockquote",[a("p",[t._v("Functional programming is a programming paradigm")]),t._v(" "),a("p",[t._v("1.treats computation as the evaluation of mathematical functions")]),t._v(" "),a("p",[t._v("2.avoids changing-state and mutable data")]),t._v(" "),a("p",[t._v("by wikipedia")])]),t._v(" "),a("p",[t._v("从以上维基百科的定义来看有三个要点")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Programming Paradigm")]),t._v("：编程范式")]),t._v(" "),a("li",[a("code",[t._v("Mathematical Functions")]),t._v("：数学函数")]),t._v(" "),a("li",[a("code",[t._v("Changing-state And Mutable Data")]),t._v("：改变状态和可变数据")])]),t._v(" "),a("p",[t._v("下面分别解析一下以上要点。")]),t._v(" "),a("h3",{attrs:{id:"_1-1-什么是编程范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是编程范式"}},[t._v("#")]),t._v(" 1.1.什么是编程范式？")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/imgs/fp-in-js/paradigms_title.png"),alt:"paradigms_title"}}),t._v(" "),a("p",[t._v("-- from "),a("a",{attrs:{href:"http://atelier.inf.unisi.ch/~dalsat/sai/projects/2015/html/sw/programming_paradigms.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Programming paradigms"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("编程范式从概念上来讲指的是编程的基本风格和典范模式。")]),t._v(" "),a("p",[t._v("换句话说其实就是程序员对于如何使用编程来解决问题的"),a("strong",[t._v("世界观和方法论")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("如果把一门编程语言比作兵器，它的语法、工具和技巧等是招法，那么它采用的编程范式也就是是内功心法。")])]),t._v(" "),a("p",[t._v("一种范式可以在不同的语言中实现，一种语言也可以同时支持多种范式。例如 JavaScript 就是一种多范式的语言。")]),t._v(" "),a("h3",{attrs:{id:"_1-2-什么是数学函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-什么是数学函数"}},[t._v("#")]),t._v(" 1.2.什么是数学函数？")]),t._v(" "),a("blockquote",[a("p",[t._v("一般的，在一个变化过程中，假设有两个变量 x、y，如果对于任意一个 x 都有唯一确定的一个y和它对应，那么就称 x 是自变量，y 是 x 的函数。x 的取值范围叫做这个函数的定义域，相应 y 的取值范围叫做函数的值域。")])]),t._v(" "),a("p",[t._v("以上定义，在初中数学咱们都应该学过...")]),t._v(" "),a("p",[t._v("换句话说，函数只是两种数值之间的关系：输入和输出。")]),t._v(" "),a("p",[t._v("尽管每个输入都只会有一个输出，但不同的输入却可以有相同的输出。下图展示了一个合法的从 x 到 y 的函数关系；")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/imgs/fp-in-js/function-sets.gif"),alt:"function-sets"}}),t._v(" "),a("p",[t._v("与之相反，下面这张图表展示的就不是一种函数关系，因为输入值 5 指向了多个输出：")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/imgs/fp-in-js/relation-not-function.gif"),alt:"relation-not-function"}}),t._v(" "),a("h4",{attrs:{id:"_1-2-1-什么是纯函数-pure-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-什么是纯函数-pure-functions"}},[t._v("#")]),t._v(" 1.2.1.什么是纯函数（Pure Functions）？")]),t._v(" "),a("blockquote",[a("p",[t._v("纯函数是这样一种函数，对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。")])]),t._v(" "),a("p",[t._v("根据定义可以看出纯函数其实就是数学函数，即表示从输入的参数到输出结果的映射。")]),t._v(" "),a("p",[t._v("而没有副作用的纯函数显然都是引用透明的。")]),t._v(" "),a("blockquote",[a("p",[t._v("引用透明性（Referential Transparency）指的是，如果一段代码在不改变整个程序行为的前提下，可以替换成它的执行结果。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("double")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("addFive")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addFive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("不过说了半天，副作用又是啥...？")]),t._v(" "),a("h4",{attrs:{id:"_1-2-2-什么是副作用-side-effects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-什么是副作用-side-effects"}},[t._v("#")]),t._v(" 1.2.2.什么是副作用（Side Effects）？")]),t._v(" "),a("blockquote",[a("p",[t._v("副作用是在计算的过程中，系统状态的一种变化，或者与外部世界进行的可观察的交互。")])]),t._v(" "),a("p",[t._v("副作用可能包含，但不限于以下行为：")]),t._v(" "),a("ul",[a("li",[t._v("更改文件系统")]),t._v(" "),a("li",[t._v("往数据库中插入记录")]),t._v(" "),a("li",[t._v("发送一个 http 请求")]),t._v(" "),a("li",[t._v("改变数据")]),t._v(" "),a("li",[t._v("打印 log")]),t._v(" "),a("li",[t._v("获取用户输入")]),t._v(" "),a("li",[t._v("DOM 查询")]),t._v(" "),a("li",[t._v("访问系统状态")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("blockquote",[a("p",[t._v("只要是跟函数外部环境发生的交互就都是副作用——这一点可能会让你怀疑无副作用编程的可行性。")])]),t._v(" "),a("blockquote",[a("p",[t._v("函数式编程的哲学就是假定副作用是造成不正当行为的主要原因。")])]),t._v(" "),a("p",[t._v("当然这并不是说，要禁止使用一切副作用，而是说，要让它们在可控的范围内发生。")]),t._v(" "),a("p",[t._v("在后面讲到函子（functor）和单子（monad）的时候我们会学习如何控制它们。")]),t._v(" "),a("h4",{attrs:{id:"_1-2-3-纯函数的好处都有啥-谁说对了就给他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-纯函数的好处都有啥-谁说对了就给他"}},[t._v("#")]),t._v(" 1.2.3.纯函数的好处都有啥~~（谁说对了就给他）~~？")]),t._v(" "),a("blockquote",[a("p",[t._v("面向对象语言的问题是，它们永远都要随身携带那些隐式的环境。你只需要一个香蕉，但却得到一个拿着香蕉的大猩猩...以及整个丛林")]),t._v(" "),a("p",[t._v("by Erlang 作者：Joe Armstrong")])]),t._v(" "),a("p",[t._v("所以使用纯函数将会有以下好处：")]),t._v(" "),a("ul",[a("li",[t._v("可缓存性（Cacheable）")]),t._v(" "),a("li",[t._v("可移植性／自文档化（Portable / Self-Documenting）")]),t._v(" "),a("li",[t._v("可测试性（Testable）")]),t._v(" "),a("li",[t._v("合理性（Reasonable）")]),t._v(" "),a("li",[t._v("并行代码（Parallel Code）")])]),t._v(" "),a("h3",{attrs:{id:"_1-3-为什么要避免改变状态和可变数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-为什么要避免改变状态和可变数据"}},[t._v("#")]),t._v(" 1.3.为什么要避免改变状态和可变数据？")]),t._v(" "),a("blockquote",[a("p",[t._v("Shared mutable state is the root of all evil")]),t._v(" "),a("p",[t._v("共享可变状态是万恶之源")]),t._v(" "),a("p",[t._v("by Pete Hunt")])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/imgs/fp-in-js/the-root-of-all-evil.jpg"),alt:"the-root-of-all-evil"}}),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("someFn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ???")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("img",{attrs:{src:t.$withBase("/imgs/fp-in-js/shared-mutable-state.jpg"),alt:"shared-mutable-state"}}),t._v(" "),a("p",[t._v("-- from "),a("a",{attrs:{href:"https://www.slideshare.net/jboner/building-scalable-highly-concurrent-fault-tolerant-systems-lessons-learned/18-Shared_mutable_state_B_L",target:"_blank",rel:"noopener noreferrer"}},[t._v("Building Scalable, Highly Concurrent & Fault Tolerant Systems - Lessons Learned"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"_1-4-原教旨函数式-vs-温和派函数式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-原教旨函数式-vs-温和派函数式"}},[t._v("#")]),t._v(" 1.4.原教旨函数式 VS 温和派函数式？")]),t._v(" "),a("p",[t._v("说到函数式编程语言，大家的第一反应可能是 Haskell、OCaml、Lisp、Erlang、Scala、F#...")]),t._v(" "),a("p",[t._v("因为它们可能有以下特性：")]),t._v(" "),a("ul",[a("li",[t._v("函数是“一等公民”（first class）")]),t._v(" "),a("li",[t._v("不可变数据")]),t._v(" "),a("li",[t._v("使用递归而不是循环")]),t._v(" "),a("li",[t._v("柯里化")]),t._v(" "),a("li",[t._v("惰性求值")]),t._v(" "),a("li",[t._v("代数数据类型")]),t._v(" "),a("li",[t._v("模式匹配")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/imgs/fp-in-js/javascript_functional_lite.png"),alt:"javascript_functional_lite"}}),t._v(" "),a("p",[t._v("而说到 JavaScript，很多人可能第一反应认为这是一门面向对象的语言。")]),t._v(" "),a("p",[t._v("但是想想前面说的：函数式编程只是一种编程范式，而编程范式就像“内功心法”，所以与以上这些语言特性不完全相关，反而与你自己的编程思维（即世界观和方法论）更加相关。")]),t._v(" "),a("p",[t._v("在函数式方面，由于 JavaScript 支持高阶函数、匿名函数、函数是一等公民、闭包、解构（模式匹配）等特性，所以它也能支持函数式编程范式。（虽然不是那么的原教旨函数式，但还基本够用~尤其是 ES6 新增的箭头函数等特性~还有各种类库 ）")]),t._v(" "),a("p",[t._v("事实上 JavaScript 是一门基于原型（prototype-based）的"),a("strong",[t._v("多范式")]),t._v("语言。")]),t._v(" "),a("h3",{attrs:{id:"_1-5-作为函数式语言-javascript-还差什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-作为函数式语言-javascript-还差什么"}},[t._v("#")]),t._v(" 1.5."),a("a",{attrs:{href:"https://github.com/jcouyang/clojure-flavored-javascript/blob/master/book/zh/%E7%AC%AC%E4%B8%80%E7%AB%A0.org#%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80-javascript-%E8%BF%98%E5%B7%AE%E4%BA%9B%E4%BB%80%E4%B9%88",target:"_blank",rel:"noopener noreferrer"}},[t._v("作为函数式语言 JavaScript 还差什么？"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"_1-5-1-不可变数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-不可变数据结构"}},[t._v("#")]),t._v(" 1.5.1.不可变数据结构")]),t._v(" "),a("p",[t._v("JavaScript 一共有 6 种原始类型（包括 ES6 新添加的 Symbol 类型），它们分别是 Boolean，Null，Undefined，Number，String 和 Symbol。 除了这些原始类型，其他的类型都是 Object，而 Object 都是可变的。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/imgs/fp-in-js/data-type-in-js.png"),alt:"data-type-in-js"}}),t._v(" "),a("h4",{attrs:{id:"_1-5-2-惰性求值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-惰性求值"}},[t._v("#")]),t._v(" 1.5.2.惰性求值")]),t._v(" "),a("p",[t._v("惰性（lazy）指求值的过程并不会立刻发生。")]),t._v(" "),a("p",[t._v("比如一些数学题，我们可能一开始并不需要把所有表达式都求值，这样可以在计算的过程中将一些表达式消掉。")]),t._v(" "),a("p",[t._v("惰性求值是相对于**及早求值（eager evaluation）**的。")]),t._v(" "),a("p",[t._v("比如大部分语言中，参数中的表达式都会被先求值，这也称为"),a("strong",[t._v("应用序")]),t._v("语言。")]),t._v(" "),a("p",[t._v("比如看下面这样一个 "),a("code",[t._v("JavaScript")]),t._v(" 的函数：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wholeNameOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirstName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLastName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("code",[t._v("getFirstName")]),t._v(" 与 "),a("code",[t._v("getLastName")]),t._v(" 会依次执行，返回值作为 "),a("code",[t._v("wholeNameOf")]),t._v(" 函数的参数， "),a("code",[t._v("wholeNameOf")]),t._v(" 函数最后才被调用。")]),t._v(" "),a("p",[t._v("另外，对于数组操作时，大部分语言也同样采用的是应用序。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("所以，这个表达式立刻会返回结果 [2, 3, 4, 5] 。")]),t._v(" "),a("p",[t._v("当然这并不是说 "),a("code",[t._v("JavaScript")]),t._v(" 语言使用应用序有问题，但是没有提供惰性序列的支持就是 "),a("code",[t._v("JavaScript")]),t._v(" 的不对了。如果 "),a("code",[t._v("map")]),t._v(" 一个大数组后我们发现其实只需要前 10 个元素时，去计算所有元素就显得多余了。")]),t._v(" "),a("h4",{attrs:{id:"_1-5-3-函数组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-3-函数组合"}},[t._v("#")]),t._v(" 1.5.3.函数组合")]),t._v(" "),a("p",[t._v("面向对象通常被比喻为名词，而函数式编程是动词。面向对象抽象的是对象，对于对象的的描述自然是名词。")]),t._v(" "),a("p",[t._v("面向对象把所有操作和数据都封装在对象内，通过接受消息做相应的操作。比如，对象 Kitty，它们可以接受“打招呼”的消息，然后做相应的动作。")]),t._v(" "),a("p",[t._v("而函数式的抽象方式刚好相反，是把动作抽象出来，比如“打招呼”就是一个函数，而函数参数就是作为数据传入的 Kitty（即 Kitty 进入函数“打招呼”，出来的应该是 Hello Kitty）。")]),t._v(" "),a("p",[t._v("面向对象可以通过继承和组合在对象之间分享一些行为或者说属性，函数式的思路就是通过"),a("strong",[t._v("组合")]),t._v("已有的函数形成一个新的函数。")]),t._v(" "),a("p",[t._v("然而 JavaScript 语言虽然支持高阶函数，但是并没有一个原生的利于组合函数产生新函数的方式。而这些强大的函数组合方式却往往被类似 Underscore，Lodash 等工具库的光芒掩盖掉（后面会说到这些库的问题）。")]),t._v(" "),a("h4",{attrs:{id:"_1-5-4-尾递归优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-4-尾递归优化"}},[t._v("#")]),t._v(" 1.5.4.尾递归优化")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/imgs/fp-in-js/tail-calls.png"),alt:"tail-calls"}}),t._v(" "),a("p",[t._v("函数式编程语言中因为不可变数据结构的原因，没办法实现循环。所以都是通过递归来实现循环。")]),t._v(" "),a("p",[t._v("然而递归使用不当很容易栈溢出（Stack Overflow），所以一般采用尾递归的方式来优化。")]),t._v(" "),a("p",[t._v("虽然 ES6 规范中规定了尾递归优化规范，然而提供实现的解释器还非常的少，详情可以查阅"),a("a",{attrs:{href:"http://kangax.github.io/compat-table/es6/",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个链接"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"_1-5-5-代数类型系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-5-代数类型系统"}},[t._v("#")]),t._v(" 1.5.5.代数类型系统")]),t._v(" "),a("p",[t._v("JavaScript 作为一种弱类型的语言，没有静态类型系统。不过使用一些 TypeScript 等预编译的语言可以作为补充~")]),t._v(" "),a("h2",{attrs:{id:"二、声明式-vs-命令式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、声明式-vs-命令式"}},[t._v("#")]),t._v(" 二、声明式 VS 命令式")]),t._v(" "),a("p",[t._v("Declarative VS Imperative，这两者的区别简单来说其实就是 What VS How。")]),t._v(" "),a("h3",{attrs:{id:"_2-1-意识形态-上的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-意识形态-上的区别"}},[t._v("#")]),t._v(" 2.1.“意识形态”上的区别~")]),t._v(" "),a("p",[t._v("声明式：")]),t._v(" "),a("ul",[a("li",[t._v("程序抽象了控制流过程，代码描述的是 —— 数据流：即做什么。")]),t._v(" "),a("li",[t._v("更多依赖表达式。")])]),t._v(" "),a("blockquote",[a("p",[t._v("表达式是指一小段代码，它用来计算某个值。表达式通常是某些函数调用的复合、一些值和操作符，用来计算出结果值。")])]),t._v(" "),a("p",[t._v("命令式：")]),t._v(" "),a("ul",[a("li",[t._v("代码描述用来达成期望结果的特定步骤 —— 控制流：即如何做。")]),t._v(" "),a("li",[t._v("频繁使用语句。")])]),t._v(" "),a("blockquote",[a("p",[t._v("语句是指一小段代码，它用来完成某个行为。通用的语句例子包括 for、if、switch、throw，等等……")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-举一些栗子🌰"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-举一些栗子🌰"}},[t._v("#")]),t._v(" 2.2.举一些栗子🌰...")]),t._v(" "),a("h4",{attrs:{id:"例1-希望得到一个数组每个数据平方后的和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例1-希望得到一个数组每个数据平方后的和"}},[t._v("#")]),t._v(" 例1：希望得到一个数组每个数据平方后的和")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 命令式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mysteryFn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nums")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" squares "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("                           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 创建中间变量")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    squares"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 循环计算平方")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" squares"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" squares"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 循环累加")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以上代码都是 how 而不是 what...")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mysteryFn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nums")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" nums\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a. 平方")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("acc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cur")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" acc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b. 累加")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br")])]),a("h4",{attrs:{id:"例2-希望得到一个数组所有偶数值的一半的平均值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例2-希望得到一个数组所有偶数值的一半的平均值"}},[t._v("#")]),t._v(" 例2：希望得到一个数组所有偶数值的一半的平均值")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 命令式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mysteryFn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nums")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tally "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("                         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 创建中间变量")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 循环，值为偶数时累加该值的一半并记录数量")]),t._v("\n      sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n      tally"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tally "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" tally  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 返回平均值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mysteryFn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nums")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" nums\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a. 过滤非偶数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b. 折半")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("acc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" idx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" length "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    idx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" acc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" cur                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c. 累加")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("acc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" length            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d. 计算平均值")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br")])]),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS函数式编程指南"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2017/03/pointfree.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pointfree 编程风格指南"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=m3svKOdZijA",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hey Underscore, You're Doing It Wrong!"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=yXJtrxVZmT4",target:"_blank",rel:"noopener noreferrer"}},[t._v("Functional Concepts with JavaScript: Part I"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://egghead.io/courses/professor-frisby-introduces-composable-functional-javascript",target:"_blank",rel:"noopener noreferrer"}},[t._v("Professor Frisby Introduces Composable Functional JavaScript"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("函数式编程入门教程"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("以上 to be continued...")])])}),[],!1,null,null,null);s.default=r.exports}}]);